from aiogram import Bot, Router, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext 
import dotenv
import os

from data import texts, keyboards
from db_manager import Manager
from utils.get_age_ending import getAgeEnding

router = Router()
manager = Manager()

class reg(StatesGroup):
    first_name = State()
    last_name = State()
    age = State()
    gender_female = State()
    want_work = State()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
async def send_registration_request(user_id: int, moderator_id: int, bot, first_name: str, last_name: str, age: int, gender: str, username: str):
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data=f'app_accept_{user_id}_{moderator_id}_{username}'), InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'app_reject_{user_id}_{moderator_id}_{username}')]
    ])

    await bot.send_message(
        moderator_id,
        texts.application_info.format(username=username, user_id=user_id, first_name=first_name, last_name=last_name, age=f"{age} {getAgeEnding(age)}", gender=gender),
        reply_markup=buttons,

    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("app_"))
async def process_moderation(callback_query: CallbackQuery, bot: Bot):
    splitted = callback_query.data.split("_")
    moderator_id = int(splitted[3])
    user_id = int(splitted[2])
    action = splitted[1]
    username = splitted[4]
    
    if action == 'accept':
        # –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        manager.update_app_status(user_id, "accepted", True)
        await bot.send_message(moderator_id, f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –ø—Ä–∏–Ω—è—Ç–∞")
        await bot.send_message(user_id, "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!", reply_markup=keyboards.menu)

    elif action == 'reject':
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        manager.update_app_status(user_id, "rejected", True)
        await bot.send_message(moderator_id, f"‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        await bot.send_message(user_id, "‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>")


    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    await callback_query.message.delete()

async def send_application(user_id: int, bot: Bot, first_name: str, last_name: str, age: int, gender_female: bool, username: str):
    dotenv.load_dotenv()
    moderator_id = os.getenv('MODERATOR_ID')  # –£–∫–∞–∂–∏—Ç–µ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (863400079), Head_ofAdministrations - 6603647116
    manager.new_user(user_id, first_name, last_name, age, gender_female)

    gender = "–ú—É–∂—Å–∫–æ–π"
    if gender_female:
        gender = "–ñ–µ–Ω—Å–∫–∏–π"

    await send_registration_request(user_id, moderator_id, bot, first_name, last_name, age, gender, username)

def isItFirstApp(user_id: int) -> bool:
    if manager.user_exists(user_id):
        return False
    else: return True

@router.message(F.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def register(message: Message, state: FSMContext):
    if isItFirstApp(message.from_user.id):
        await state.set_state(reg.first_name)
        await message.answer("‚öôÔ∏è <b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>")
    else:
        user = manager.get_user(message.from_user.id)
        if user[7]:
            await message.answer(texts.application_accepted_error)
        else:
            await message.answer(texts.application_repeat_error)

@router.message(reg.first_name)
async def register1(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await state.set_state(reg.last_name)
    await message.answer("‚öôÔ∏è <b>–ß—Ç–æ –Ω–∞ —Å—á–µ—Ç —Ñ–∞–º–∏–ª–∏–∏?</b>")

@router.message(reg.last_name)
async def register2(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await state.set_state(reg.age)
    await message.answer("‚öôÔ∏è <b>–°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?</b>")

@router.message(reg.age)
async def register3(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await state.set_state(reg.gender_female)
        await message.answer("‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:</b>", reply_markup=keyboards.gender_choice)
    except:
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞!</b> –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–∞–º–∏, –Ω–µ –±—É–∫–≤–∞–º–∏ –∏–ª–∏ —Å–∏–º–≤–æ–ª–∞–º–∏!")

@router.message(reg.gender_female)
async def register4(message: Message, state: FSMContext):
    if message.text != "üë® –ú—É–∂—Å–∫–æ–π" and message.text != "üë© –ñ–µ–Ω—Å–∫–∏–π":
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞!</b> –í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –Ω–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö!")
    else:
        gender_female = True
        if message.text == "üë® –ú—É–∂—Å–∫–æ–π": gender_female = False
        await state.update_data(gender_female=gender_female)

        await state.set_state(reg.want_work)
        await message.answer("‚öôÔ∏è <b>–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å? –ò–ª–∏ –∂–µ –≤—ã –∑–∞—à–ª–∏ —Å—é–¥–∞ –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è?</b>", reply_markup=keyboards.want_work)

@router.message(reg.want_work)
async def register5(message: Message, bot: Bot, state: FSMContext):
    if message.text == "‚úÖ –Ø –Ω–∞–º–µ—Ä–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å":
        await message.answer(texts.application_send, reply_markup=keyboards.start)
        
        data = await state.get_data()
        await send_application(message.from_user.id, bot, data["first_name"], data["last_name"], data["age"], data["gender_female"], message.from_user.username)
        await state.clear()

    elif message.text == "‚ùå –Ø –∑–∞—à–µ–ª –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è":
        await message.answer("‚ùå <b>–í—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ!</b> ", reply_markup=keyboards.start)
        
        data = await state.get_data()
        manager.new_user(message.from_user.id, data["first_name"], data["last_name"], data["age"], data["gender_female"], rejected=True)
        await state.clear()

    else:
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞!</b> –í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –Ω–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö!")
    


@router.message(Command("reg"))
async def register_command(message: Message, state: FSMContext):
    if isItFirstApp(message.from_user.id):
        await state.set_state(reg.first_name)
        await message.answer("‚öôÔ∏è <b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>")
    else:
        user = manager.get_user(message.from_user.id)
        if user[7]:
            await message.answer(texts.application_accepted_error)
        else:
            await message.answer(texts.application_repeat_error)
